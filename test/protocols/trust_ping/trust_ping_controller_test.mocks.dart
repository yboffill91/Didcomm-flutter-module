// Mocks generated by Mockito 5.4.6 from annotations
// in android_wallet_mydsc/test/protocols/trust_ping/trust_ping_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:android_wallet_mydsc/src/config/didcomm_config.dart' as _i6;
import 'package:android_wallet_mydsc/src/crypto/did/did_generator.dart' as _i2;
import 'package:android_wallet_mydsc/src/crypto/encryption/jwe_encryptor.dart'
    as _i5;
import 'package:android_wallet_mydsc/src/crypto/signing/ldp_signer.dart' as _i4;
import 'package:android_wallet_mydsc/src/service/did_resolver.dart' as _i3;
import 'package:android_wallet_mydsc/src/transport/service_didcomm.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDidGenerator_0 extends _i1.SmartFake implements _i2.DidGenerator {
  _FakeDidGenerator_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDIDResolver_1 extends _i1.SmartFake implements _i3.DIDResolver {
  _FakeDIDResolver_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLdpSigner_2 extends _i1.SmartFake implements _i4.LdpSigner {
  _FakeLdpSigner_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJweEncryptor_3 extends _i1.SmartFake implements _i5.JweEncryptor {
  _FakeJweEncryptor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDIDCommConfig_4 extends _i1.SmartFake implements _i6.DIDCommConfig {
  _FakeDIDCommConfig_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LdpSigner].
///
/// See the documentation for Mockito's code generation for more information.
class MockLdpSigner extends _i1.Mock implements _i4.LdpSigner {
  MockLdpSigner() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DidGenerator get didGen => (super.noSuchMethod(
        Invocation.getter(#didGen),
        returnValue: _FakeDidGenerator_0(
          this,
          Invocation.getter(#didGen),
        ),
      ) as _i2.DidGenerator);

  @override
  _i7.Future<Map<String, dynamic>> sign(Map<String, dynamic>? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [message],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);
}

/// A class which mocks [JweEncryptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockJweEncryptor extends _i1.Mock implements _i5.JweEncryptor {
  MockJweEncryptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DidGenerator get didGen => (super.noSuchMethod(
        Invocation.getter(#didGen),
        returnValue: _FakeDidGenerator_0(
          this,
          Invocation.getter(#didGen),
        ),
      ) as _i2.DidGenerator);

  @override
  _i3.DIDResolver get didResolver => (super.noSuchMethod(
        Invocation.getter(#didResolver),
        returnValue: _FakeDIDResolver_1(
          this,
          Invocation.getter(#didResolver),
        ),
      ) as _i3.DIDResolver);

  @override
  _i7.Future<Map<String, dynamic>> encrypt(
    Map<String, dynamic>? message,
    String? recipientDid,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #encrypt,
          [
            message,
            recipientDid,
          ],
        ),
        returnValue:
            _i7.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i7.Future<Map<String, dynamic>>);
}

/// A class which mocks [DIDCommService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDIDCommService extends _i1.Mock implements _i8.DIDCommService {
  MockDIDCommService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LdpSigner get signer => (super.noSuchMethod(
        Invocation.getter(#signer),
        returnValue: _FakeLdpSigner_2(
          this,
          Invocation.getter(#signer),
        ),
      ) as _i4.LdpSigner);

  @override
  _i5.JweEncryptor get encryptor => (super.noSuchMethod(
        Invocation.getter(#encryptor),
        returnValue: _FakeJweEncryptor_3(
          this,
          Invocation.getter(#encryptor),
        ),
      ) as _i5.JweEncryptor);

  @override
  _i6.DIDCommConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeDIDCommConfig_4(
          this,
          Invocation.getter(#config),
        ),
      ) as _i6.DIDCommConfig);

  @override
  _i7.Future<bool> send(dynamic message) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [message],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void listenToIncoming(void Function(Map<String, dynamic>)? onMessage) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToIncoming,
          [onMessage],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
