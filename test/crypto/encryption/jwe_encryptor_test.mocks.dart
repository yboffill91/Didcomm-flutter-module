// Mocks generated by Mockito 5.4.6 from annotations
// in android_wallet_mydsc/test/crypto/encryption/jwe_encryptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i8;

import 'package:android_wallet_mydsc/src/config/didcomm_config.dart' as _i3;
import 'package:android_wallet_mydsc/src/crypto/did/did_generator.dart' as _i4;
import 'package:android_wallet_mydsc/src/service/did_resolver.dart' as _i7;
import 'package:cryptography/cryptography.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSimpleKeyPair_0 extends _i1.SmartFake implements _i2.SimpleKeyPair {
  _FakeSimpleKeyPair_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublicKey_1 extends _i1.SmartFake implements _i2.PublicKey {
  _FakePublicKey_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDIDCommConfig_2 extends _i1.SmartFake implements _i3.DIDCommConfig {
  _FakeDIDCommConfig_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DidGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDidGenerator extends _i1.Mock implements _i4.DidGenerator {
  MockDidGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SimpleKeyPair get keyPair => (super.noSuchMethod(
        Invocation.getter(#keyPair),
        returnValue: _FakeSimpleKeyPair_0(
          this,
          Invocation.getter(#keyPair),
        ),
      ) as _i2.SimpleKeyPair);

  @override
  _i2.PublicKey get publicKey => (super.noSuchMethod(
        Invocation.getter(#publicKey),
        returnValue: _FakePublicKey_1(
          this,
          Invocation.getter(#publicKey),
        ),
      ) as _i2.PublicKey);

  @override
  String get myDid => (super.noSuchMethod(
        Invocation.getter(#myDid),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#myDid),
        ),
      ) as String);

  @override
  _i6.Future<String> serialize() => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #serialize,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<String> getPublicKeyBase58() => (super.noSuchMethod(
        Invocation.method(
          #getPublicKeyBase58,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicKeyBase58,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<Map<String, dynamic>> getDidDocument() => (super.noSuchMethod(
        Invocation.method(
          #getDidDocument,
          [],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);
}

/// A class which mocks [DIDResolver].
///
/// See the documentation for Mockito's code generation for more information.
class MockDIDResolver extends _i1.Mock implements _i7.DIDResolver {
  MockDIDResolver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DIDCommConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeDIDCommConfig_2(
          this,
          Invocation.getter(#config),
        ),
      ) as _i3.DIDCommConfig);

  @override
  _i6.Future<_i8.Uint8List?> resolvePublicKey(String? did) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolvePublicKey,
          [did],
        ),
        returnValue: _i6.Future<_i8.Uint8List?>.value(),
      ) as _i6.Future<_i8.Uint8List?>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
